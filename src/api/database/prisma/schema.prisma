// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String           @id @default(uuid())
  enterprise     String
  userName       String
  email          String           @unique
  password       Password?
  Outflow        Outflow[]
  ElectronicSale ElectronicSale[]
  CashIncome     CashIncome[]
  createdAt      DateTime         @default(now())
}

model Password {
  id     String @id @default(uuid())
  pass   String
  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Session {
  id        String   @id @default(uuid())
  email     String
  userName  String
  valid     Boolean  @default(true)
  createdAt DateTime @default(now())
}

model Outflow {
  id              String            @id @default(uuid())
  description     String
  totalAmount     Decimal
  User            User              @relation(fields: [userId], references: [id])
  userId          String
  AllTransactions AllTransactions[]
  createdAt       DateTime          @default(now())
}

model MovementType {
  id              String            @id @default(uuid())
  nameEs          String
  nameEn          String
  AllTransactions AllTransactions[]
  createdAt       DateTime          @default(now())
}

model OperationType {
  id             String           @id @default(uuid())
  nameEs         String
  nameEn         String
  ElectronicSale ElectronicSale[]
  createdAt      DateTime         @default(now())
}

model FinancialEntity {
  id             String           @id @default(uuid())
  name           String
  ElectronicSale ElectronicSale[]
  createdAt      DateTime         @default(now())
}

model ElectronicSale {
  id                String            @id @default(uuid())
  User              User              @relation(fields: [userId], references: [id])
  userId            String
  OperationType     OperationType     @relation(fields: [operationTypeId], references: [id])
  operationTypeId   String
  FinancialEntity   FinancialEntity   @relation(fields: [financialEntityId], references: [id])
  financialEntityId String
  AllTransactions   AllTransactions[]
  debitNote         Decimal
  totalAmount       Decimal
  createdAt         DateTime          @default(now())
}

model CashIncome {
  id              String            @id @default(uuid())
  User            User              @relation(fields: [userId], references: [id])
  userId          String
  AllTransactions AllTransactions[]
  totalAmount     Decimal
  debitNote       Decimal
  createdAt       DateTime          @default(now())
}

model CashCount {
  id           String   @id @default(uuid())
  denomination Decimal
  currencyType String
  count        Int
  total        Decimal
  createdAt    DateTime @default(now())
}

model Sale {
  id          String   @id @default(uuid())
  debitNote   Decimal?
  description String?
  totalAmount Decimal
  createdAt   DateTime @default(now())
}

model AllTransactions {
  id               String          @id @default(uuid())
  MovementType     MovementType    @relation(fields: [movementTypeId], references: [id])
  movementTypeId   String
  Outflow          Outflow?        @relation(fields: [outflowId], references: [id])
  outflowId        String?
  ElectronicSale   ElectronicSale? @relation(fields: [electronicSaleId], references: [id])
  electronicSaleId String?
  CashIncome       CashIncome?     @relation(fields: [cashIncomeId], references: [id])
  cashIncomeId     String?
  createdAt        DateTime        @default(now())
}
